package com.ubirch.signatureverifier

import java.util.{Base64, UUID}

import com.typesafe.config.ConfigFactory
import com.typesafe.scalalogging.StrictLogging
import com.ubirch.client.protocol.DefaultProtocolVerifier
import com.ubirch.client.util.curveFromString
import com.ubirch.kafka.RichAnyProducerRecord
import com.ubirch.crypto.{GeneratorKeyFactory, PubKey}
import com.ubirch.niomon.base.{NioMicroservice, NioMicroserviceMock}
import javax.xml.bind.DatatypeConverter
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.common.header.internals.{RecordHeader, RecordHeaders}
import org.apache.kafka.common.serialization.{ByteArrayDeserializer, ByteArraySerializer}
import org.scalatest.{FlatSpec, Matchers}

class RoutingTest extends FlatSpec with Matchers with StrictLogging {

  implicit val bytesSerializer: ByteArraySerializer = new ByteArraySerializer
  implicit val byteDeserializer: ByteArrayDeserializer = new ByteArrayDeserializer

  private val v2HardwareId = "6eac4d0b-16e6-4508-8c46-22e7451ea5a1"
  private val v2MsgPackHex = "9522c4106eac4d0b16e645088c4622e7451ea5a100c4206b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4bc440bc2a01322c679b9648a9391704e992c041053404aafcdab08fc4ce54a57eb16876d741918d01219abf2dc7913f2d9d49439d350f11d05cdb3f85972ac95c45fc"

  private val v1HardwareId = "946ba755-e132-4680-a380-7be395eb8ccd"
  private val v1MsgPackHex = "9613b0946ba755e1324680a3807be395eb8ccdda004001d3c78a7bc8738cbabee96ae86651c89aa81252dee0e7c7f3457324202aae9c3d16332d3d7ecde72fa26801a081b6347148bae6ab22b8830c360d78d0b63f0e00a50102030405da0040b30fa8a898282878862e15ed871f6618043fb7c2400daed1bdf7bad5c790edd5b011d248be2ee04bc086b02bd9c337b981eeaff1eefca47d346132ab4cfd8006"

  private val trackleHardwareId = "7aa42ea9-f981-91a6-9b9c-b14aacabce54"
  private val trackleMsgPack = ""

  private val keyServerClient = (c: NioMicroservice.Context) => new CachingUbirchKeyService(c) {
    private val eddsaKey = GeneratorKeyFactory.getPubKey(
      "55f0feac4f2bcf879330eff348422ab3abf5237a24acaf0aef3bb876045c4e532fbd6cd8e265f6cf28b46e7e4512cd06ba84bcd3300efdadf28750f43dafd771",
      curveFromString("ecdsa-p256v1")
    )

    private val waldisKey = GeneratorKeyFactory.getPubKey(
      Base64.getDecoder.decode("7odnHwchQA6AAk8AZzCQevnWM2PT4Jg+MSxVDf7wGsU="),
      curveFromString("ECC_ED25519")
    )

    private val trackleKey = GeneratorKeyFactory.getPubKey(
      Base64.getDecoder.decode("Lujc3SSchaqzGn/wDZWzmRfwVgdCZBoW6QkLT7N1700="),
      curveFromString("ECC_ED25519")
    )

    override def getPublicKey(uuid: UUID): List[PubKey] = {
      uuid.toString match {
        case id if id == v2HardwareId => List(eddsaKey)
        case id if id == v1HardwareId => List(waldisKey)
        case id if id == trackleHardwareId => List(trackleKey)
        case _ => Nil
      }
    }
  }

  private val microservice = NioMicroserviceMock(SignatureVerifierMicroservice(c => new DefaultProtocolVerifier(keyServerClient(c))))
  microservice.outputTopics = Map("valid" -> "valid")
  microservice.errorTopic = Some("invalid")
  microservice.config = ConfigFactory.load().getConfig("niomon-verifier")
  microservice.name = "niomon-verifier"

  import microservice.kafkaMocks._


  "msgpackv2 with valid signature" should "be routed to 'valid' queue" in {
    val binary = DatatypeConverter.parseHexBinary(v2MsgPackHex)
    val record = new ProducerRecord[String, Array[Byte]]("incoming", 1, "foo", binary, new RecordHeaders().add(new RecordHeader("X-Ubirch-Hardware-Id".toLowerCase, v2HardwareId.getBytes())))
    publishToKafka(record)

    val validTopicEnvelopes = consumeNumberMessagesFrom("valid", 1, autoCommit = true)
    validTopicEnvelopes.size should be(1)

    val approvedMessage = validTopicEnvelopes.head
    approvedMessage should equal(binary)
  }

  "msgpackv1 with valid signature" should "be routed to 'valid' queue" in {
    val binary = DatatypeConverter.parseHexBinary(v1MsgPackHex)
    val record = new ProducerRecord[String, Array[Byte]]("incoming", 1, "foo", binary, new RecordHeaders().add(new RecordHeader("X-Ubirch-Hardware-Id".toLowerCase, v1HardwareId.getBytes())))
    publishToKafka(record)

    val validTopicEnvelopes = consumeNumberMessagesFrom("valid", 1, autoCommit = true)
    validTopicEnvelopes.size should be(1)

    val approvedMessage = validTopicEnvelopes.head
    approvedMessage should equal(binary)
  }

  "msgpackv1 with invalid signature" should "be routed to 'invalid' queue" in {
    val binary = DatatypeConverter.parseHexBinary(v1MsgPackHex + "12")
    val record = new ProducerRecord[String, Array[Byte]]("incoming", binary).withExtraHeaders("X-Ubirch-Hardware-Id".toLowerCase -> v1HardwareId).withRequestIdHeader()("foo")

    publishToKafka(record)

    val invalidTopicEnvelopes = consumeNumberStringMessagesFrom("invalid", 1, autoCommit = true)
    invalidTopicEnvelopes.size should be(1)

    val rejectedMessage = invalidTopicEnvelopes.head
    rejectedMessage should equal("""{"error":"SignatureException: Invalid signature","causes":[],"microservice":"niomon-verifier","requestId":"foo"}""")
  }

  "msgpackv1 with no hwDeviceId in the header" should "be routed to 'valid' queue" in {
    val binary = DatatypeConverter.parseHexBinary(v1MsgPackHex + "12")
    val record = new ProducerRecord[String, Array[Byte]]("incoming", binary).withRequestIdHeader()("foo")
    publishToKafka(record)

    val invalidTopicEnvelopes = consumeNumberMessagesFrom("invalid", 1, autoCommit = true)
    invalidTopicEnvelopes.size should be(1)

    val rejectedMessage: Array[Byte] = invalidTopicEnvelopes.head
    rejectedMessage.map(_.toChar).mkString should equal("{\"error\":\"SignatureException: Header with key x-ubirch-hardware-id is missing. Cannot verify msgPack.\",\"causes\":[],\"microservice\":\"niomon-verifier\",\"requestId\":\"foo\"}")
  }

  "trackleMsg with valid signature" should "be routed to 'valid' queue" in {
    val binary = DatatypeConverter.parseHexBinary(trackleMsgPack)
    val record = new ProducerRecord[String, Array[Byte]]("incoming", 1, "foo", binary, new RecordHeaders().add(new RecordHeader("X-Ubirch-Hardware-Id".toLowerCase, trackleHardwareId.getBytes())))
    publishToKafka(record)

    val validTopicEnvelopes = consumeNumberMessagesFrom("valid", 1, autoCommit = true)
    validTopicEnvelopes.size should be(1)

    val approvedMessage = validTopicEnvelopes.head
    approvedMessage should equal(binary)
  }

}
